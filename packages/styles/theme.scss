@use 'sass:map';
@use './_variables' as var;

// -----------------------------
// 🎨 颜色设计变量命名规范
// -----------------------------
// 设计参考: https://tailwindcss.com/docs/colors
// 采用设计系统分级（Design Token）风格，使用结构化命名，方便主题维护与自动生成 CSS 变量。
// 命名格式: $<color-name>-<scale>
//
// - color-name: 颜色语义标识或色调（如 primary、success、gray）
// - scale: 数值越小表示颜色越浅（如 50 接近白色，900 接近黑色）
//
// 🌟 建议使用分级: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950
// - 500 为主色基准值（推荐 UI 主色）
// - 其他等级用于 hover、disabled、背景、边框等场景
//
// 🔄 可统一生成 CSS Variables，用于 :root 或主题切换
// e.g. $primary-500 → --primary-500

// 主题色
$theme-color-50: #ede6ff;
$theme-color-500: #6e64c8;

// 基础色(背景/字体)
$color-base-50: #fff;
$color-base-250: #f5f6f7;
$color-base-500: #eee;
$color-base-inverse-50: #777777;
$color-base-inverse-250: #333333;
$color-base-inverse-500: #000000;

// 警告色
$color-danger-500: #ff7b7b;

// -----------------------------
// 🔤 字体设计变量命名规范
// -----------------------------
// 设计参考: https://tailwindcss.com/docs/font-size
// 参考标准: https://developer.mozilla.org/en-US/docs/Web/CSS/font-size#values
// xx-small、x-small、small、medium、large、x-large、xx-large、xxx-large(基于用户默认字体大小（medium）的绝对大小关键字)

$size-root: 16; // 🔤 尺寸基准值，控制设计稿与真实页面的缩放比例

$text-small-map: (
	// 14px
	0: 0.875,
	// 12px
	1: 0.75,
	// 10px
	2: 0.625,
	// 8px
	3: 0.5,
	// 6px
	4: 0.375,
	// 4px
	5: 0.25,
	// 2px
	6: 0.125
);

$text-large-map: (
	// 18px
	0: 1.125,
	// 20px
	1: 1.25,
	// 24px
	2: 1.5,
	// 30px
	3: 1.875,
	4: 2.25,
	5: 3,
	6: 3.75,
	7: 4.5,
	8: 6,
	9: 8
);

// 获取字体大小比例
@function text-get-ratio($scale, $step) {
	$ratio: 1; // 默认值

	@if $scale == small and map.has-key($text-small-map, $step) {
		$ratio: map.get($text-small-map, $step);
	} @else if $scale == large and map.has-key($text-large-map, $step) {
		$ratio: map.get($text-large-map, $step);
	} @else {
		@warn "text-get-ratio(): 无效的 scale 或 step，返回基础值";
	}

	@return $ratio;
}

// 主题变量
@mixin vars {
	// 🌈 主题色
	--theme-color-50: #{$theme-color-50};
	--theme-color-500: #{$theme-color-500};

	// 🎨 基础颜色
	--color-base-50: #{$color-base-50};
	--color-base-250: #{$color-base-250};
	--color-base-500: #{$color-base-500};
	--color-base-inverse-50: #{$color-base-inverse-50};
	--color-base-inverse-250: #{$color-base-inverse-250};
	--color-base-inverse-500: #{$color-base-inverse-500};
	--color-danger-500: #{$color-danger-500};

	// 🔤 尺寸基准值，控制设计稿与真实页面的缩放比例
	--size-root: #{$size-root};

	// 🔤 最小单位：等效于 1px：
	// - 当使用 rem 方案：1px = calc(1 / var(--size-root) * 1rem)
	// - 当使用 vw 方案：1px = calc(1 / var(--size-root) * 100vw)
	--size-unit: calc(1 / var(--size-root) * 1rem);

	// 🔠 字体尺寸（根据 --size-root 等比缩放）
	--text-6xs: calc(var(--text-base) * #{text-get-ratio(small, 6)});
	--text-5xs: calc(var(--text-base) * #{text-get-ratio(small, 5)});
	--text-4xs: calc(var(--text-base) * #{text-get-ratio(small, 4)});
	--text-3xs: calc(var(--text-base) * #{text-get-ratio(small, 3)});
	--text-2xs: calc(var(--text-base) * #{text-get-ratio(small, 2)});
	--text-xs: calc(var(--text-base) * #{text-get-ratio(small, 1)});
	--text-sm: calc(var(--text-base) * #{text-get-ratio(small, 0)});
	--text-base: calc(16 * var(--size-unit));
	--text-lg: calc(var(--text-base) * #{text-get-ratio(large, 0)});
	--text-xl: calc(var(--text-base) * #{text-get-ratio(large, 1)});
	--text-2xl: calc(var(--text-base) * #{text-get-ratio(large, 2)});
	--text-3xl: calc(var(--text-base) * #{text-get-ratio(large, 3)});
	--text-4xl: calc(var(--text-base) * #{text-get-ratio(large, 4)});
	--text-5xl: calc(var(--text-base) * #{text-get-ratio(large, 5)});
	--text-6xl: calc(var(--text-base) * #{text-get-ratio(large, 6)});
	--text-7xl: calc(var(--text-base) * #{text-get-ratio(large, 7)});
	--text-8xl: calc(var(--text-base) * #{text-get-ratio(large, 8)});
	--text-9xl: calc(var(--text-base) * #{text-get-ratio(large, 9)});

	// 🧱 层级控制
	--z-index-base: #{var.$z-index-base};

	// 🎯 语义色扩展（从基础色继承）
	--color-text-500: var(--color-base-inverse-500);
	--color-text-inverse-500: var(--color-base-50);
	--color-icon-500: var(--color-base-inverse-500);
	--color-border-500: var(--color-base-500);
	--color-bg-500: var(--color-base-250);

	// 🌙 暗色模式变量切换（通过类名控制）
	&.dark {
		--color-base-inverse-50: #{$color-base-50};
		--color-base-inverse-250: #{$color-base-250};
		--color-base-inverse-500: #{$color-base-500};

		--color-base-50: #{$color-base-inverse-500};
		--color-base-250: #{$color-base-inverse-250};
		--color-base-500: #{$color-base-inverse-50};
	}

	font-size: calc(var(--size-root) * 1px);
}
